Python 실습예제
자유자재로 데이터 가공하기
3. 필요한 변수만 추출하기
df[]
exam['math']
exam[['math']]
exam[['nclass', 'math', 'english']]

변수 제거하기
exam.drop(columns = 'math')

exam.query('nclass==1')['english']
exam.query('math >=50')[['id', 'math']]
exam.query('math >=50')[['id', 'math']].head(10)

가독성 있게 코드 줄 바꾸기
exam.query('math>=50')\
    [['id', 'math']]\
    .head(10)

Q1. mpg 데이터는 11개 변수로 구성됩니다. 이 중 일부만 추출해 분석에 활용하려고 합니다.
mpg 데이터에서 category(자동차 종류), cty(도시 연비) 변수를 추출해 새로운 데이터를
만드세요. 새로 만든 데이터의 일부를 출력해 두 변수로만 구성되어 있는지 확인하세요.
mpg = pd.read_csv('mpg.csv')
mpg_new = mpg[['category', 'cty']]
mpg_new.head()
Q2. 자동차 종류에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다.
앞에서 추출한 데이터를 이용해 category(자동차 종류)가 'suv'인 자동차와 'compact'인 자동차 중
어떤 자동차의 cty(도시 연비) 평균이 더 높은지 알아보세요.
mpg_new.query('category=="suv"')['cty'].mean()
mpg_new.query('category=="compact"')['cty'].mean()



4. 순서대로 정렬하기
df.sort_values()
exam.sort_values('math') # math 오름차순 정렬
exam.sort_values('math', ascending=False)

exam.sort_values(['nclass', 'math'])
exam.sort_values(['nclass', 'math'], ascending=[True,False])

Q1. 'audi'에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고
합니다. 'audi' 에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.
mpg = pd.read_csv('mpg.csv')
mpg_audi = mpg.query('manufacturer=="audi"').sort_values('hwy', ascending=False).head()



5. 파생변수 추가하기
df.assign()
exam.assign(
    total = exam['math'] + exam['english'] + exam['science'],
    mean = (exam['math'] + exam['english'] + exam['science'])/3
)

import numpy as np
exam.assign(test = np.where(exam['science'] >=60, 'pass', 'fail'))

exam.assign(total = exam['math'] + exam['english'] + exam['science']).sort_values('total')

lambda 이용해 데이터 프레임명 줄여쓰기
long_name = pd.read_csv('exam.csv')
long_name.assign(new = lambda x: x['math'] + x['english'] + x['science'])

Q1. mpg데이터 복사본을 만들고, cty와 hwy를 더한 '합산연비변수'를 추가하세요.
mpg = pd.read_csv('mpg.csv')
mpg_new = mpg.copy()
mpg_new = mpg_new.assign(total = mpg_new['cty'] + mpg_new['hwy'])

Q2. 앞에서 만든 '합산연비변수'를 2로 나눠 '평균연비변수'를 추가하세요.
mpg_new = mpg_new.assign(mean = mpg_new['total']/2)

Q3. '평균연비변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
mpg_new.sort_values('mean', ascending=False).head(3)

Q4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas구문을 만들어 실행해 보세요.
    데이터는 복사본 대신 mpg원본을 이용하세요.
mpg.assign(total = mpg["cty"] + mpg["hwy"], 
          mean = lambda x: x["total"]/2) \
    .sort_values("mean", ascending=False) \
    .head(3)
mpg.assign(total = lambda x: x["cty"] + x["hwy"],
           mean = lambda x: x["total"]/2) \
    .sort_values("mean", ascending=False) \
    .head(3)



6. 집단별로 요약하기
df.groupby(), df.agg()
exam.agg(mean_math = ('math','mean'))
exam.groupby('nclass').agg(mean_math = ('math','mean'))
exam.groupby('nclass', as_index=False).agg(mean_math = ('math','mean'))
exam.groupby('nclass').agg(mean_math = ('math','mean'),
                            sum_math = ('math','sum'),
                            median_math = ('math','median'),
                            n = ('nclass','count'))

mpg.groupby(['manufacturer', 'drv']).agg(mean_cty = ('cty', 'mean'))
mpg['drv'].value_counts()

Q.제조 회사별로 'suv'자동차의 도시 및 고속도로 합산연비평균을 구해 내림차순으로 정렬하고, 1~5위까지 출력하기
mpg.query('category=="suv"').assign(total = mpg['cty'] + mpg['hwy']).groupby('manufacturer').agg(mean = ('total', 'mean')).sort_values('mean', ascending=False).head()
mpg.query("category=='suv'")\
    .assign(total = mpg['cty']+ mpg['hwy'])\
    .groupby('manufacturer')\
    .agg(mean=('total', 'mean'))\
    .sort_values('mean', ascending=False)\
    .head()

Q1. mpg 데이터의 category는 자동차를 특징에 따라 'suv', 'compact' 등 일곱 종류로 분류한 변수입니다.
어떤 차종의 도시 연비가 높은지 비교해 보려고 합니다. category별 cty 평균을 구해 보세요.
mpg.groupby('category').assign(mean=('cty','mean')
Q2. 앞 문제의 출력 결과는 category 값 알파벳순으로 정렬되어 있습니다.
어떤 차종의 도시 연비가 높은지 쉽게 알아볼 수 있도록 cty 평균이 높은 순으로 정렬해 출력하세요.
mpg.groupby('category').agg(mean=('cty','mean')).sort_values('mean', ascending=False)
Q3. 어떤 회사 자동차의 hwy(고속도로 연비)가 가장 높은지 알아보려고 합니다.
hwy 평균이 가장 높은 회사 세 곳을 출력하세요.
mpg.groupby('manufacturer') \
.agg(mean_hwy = ('hwy', 'mean')) \
.sort_values('mean_hwy', ascending=False) \
.head(3)
Q4. 어떤 회사에서 'compact' 차종을 가장 많이 생산하는지 알아보려고 합니다.
회사별 'compact' 차종 수를 내림차순으로 정렬해 출력하세요.
mpg.query('category == "compact"') \
.groupby('manufacturer') \
.agg(n = ('manufacturer', 'count')) \
.sort_values('n', ascending = False)

mpg.query('category == "compact"') \
.value_counts('manufacturer')



7. 데이터 합치기
가로로 합치기: df.merge()
세로로 합치기: df.concat()

#중간고사 데이터
test1 = pd.DataFrame({ "id" : [1,2,3,4,5],
                     "midterm" : [60,80,70,90,85]})
#기말고사 데이터
test2 = pd.DataFrame({ "id" : [1,2,3,4,5],
                     "final" : [70,83,65,95,80]})
total = pd.merge(test1, test2, how='left', on='id')
total
name = pd.DataFrame({"nclass" : [1,2,3,4,5],
                    "teacher": ["kim", "lee", "park", "choi", "jung"]})
name
exam_new = pd.merge(exam, name, how='left', on='nclass')
exam_new

#학생 1~5번 시험 데이터
group_a = pd.DataFrame({"id": [1,2,3,4,5],
                       "test" : [60,80,70,90,85]})
#학생 6~10
group_b = pd.DataFrame({"id": [6,7,8,9,10],
                       "test" : [60,80,70,90,85]})
group_all = pd.concat([group_a, group_b], ignore_index=True)
group_all

fuel = pd.DataFrame({ "f1" : ["c", "d", "e", "p", "r"],
                    "price_fl" : [2.35, 2.38, 2.11, 2.76, 2.22]})
fuel
Q1. mpg 데이터에는 연료 종류를 나타낸 fl 변수는 있지만 연료 가격을 나타낸 변수는 없습니다.
앞에서 만든 fuel 데이터를 이용해 mpg 데이터에 price_fl(연료 가격) 변수를 추가하세요.
mpg = pd.merge(mpg, fuel, how='left', on='fl')
mpg
Q2. 연료 가격 변수가 잘 추가됐는지 확인하기 위해 model, fl, price_fl 변수를 추출해 앞부분
5행을 출력해 보세요.
mpg[['model', 'fl', 'price_fl']].head()



데이터 정제- 빠진 데이터, 이상한 데이터 제거하기
1. 빠진 데이터를 찾아라!-결측치 정제하기
결측치(missing value): 누락된 값, 비어있는 값
-데이터수집 과정에서 발생한 오류로 포함될 가능성
-함수가 적용되지 않거나 분석결과가 왜곡되는 문제발생
-실제 데이터분석시 결측치 확인,제거 후 분석해야 함
import pandas as pd
import numpy as np
df = pd.DataFrame({
    'sex':['M', 'F', np.nan, 'M', 'F'],
    'score': [5, 4, 3, 4, np.nan]
})
df
df['score'] + 1
pd.isna(df)
pd.isna(df).sum()
df_nomiss = df.dropna(subset=['score'])
df_nomiss['score'] + 1
df_nomiss = df.dropna(subset=['score', 'sex'])
df_nomiss
df_nomiss2 = df.dropna()
df_nomiss2

결측치 대체하기
-결측치가 적고 데이터가 크면 결측치 제거 후 분석가능
-데이터가 작고 결측치 많으면 데이터 손실로 인해 분석결과 왜곡 발생
-결측치 대체법을 이용하면 보완 가능

결측치 대체법(imputation): 결측치를 제거하는 대신 다른 값을 채워넣는 방법
-대표값(평균값, 최빈값 등)을 구해 일괄 대체
-통계분석기법으로 결측치의 예측값 추정 후 대체
exam = pd.read_csv('exam.csv')
exam.loc[[2,7,14], ['math']] = np.nan
exam
exam['math'].mean()
exam['math'] = exam['math'].fillna(55)
exam

mpg =pd.read_csv("mpg.csv")
mpg.loc[[64,123,130,152,211], "hwy"] = np.nan
Q1.  drv(구동 방식)별로 hwy(고속도로 연비) 평균이 어떻게 다른지 알아보려고 합니다.
분석을 하기 전에 우선 두 변수에 결측치가 있는지 확인해야 합니다. 
drv 변수와 hwy 변수에 결측치가 몇 개 있는지 알아보세요.
mpg[['drv', 'hwy']].isna().sum()
Q2. df.dropna()를 이용해 hwy 변수의 결측치를 제거하고, 어떤 구동 방식의 hwy 평균이 높은지 알아보세요.
하나의 pandas 구문으로 만들어야 합니다.
mpg.dropna(subset=['hwy']).groupby('drv').agg(mean=('hwy', 'mean'))



2. 이상한 데이터를 찾아라!- 이상치 정제하기
